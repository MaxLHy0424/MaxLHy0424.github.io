<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>MaxLHy0424</title><link>https://MaxLHy0424.github.io</link><description>「一定能找到, 通往与这扭曲的终点所截然不同的, 另一种结局的正确选项. 所在皆是奇迹的起点. 」</description><copyright>MaxLHy0424</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/142279449?v=4</url><title>avatar</title><link>https://MaxLHy0424.github.io</link></image><lastBuildDate>Sun, 18 Aug 2024 03:15:01 +0000</lastBuildDate><managingEditor>MaxLHy0424</managingEditor><ttl>60</ttl><webMaster>MaxLHy0424</webMaster><item><title>CRCSN 开发小记 03</title><link>https://MaxLHy0424.github.io/post/11.html</link><description>日子过得真快呢. 不知不觉间, CRCSN **v5.0.0** 的开发已经接近尾声, 面向公众测试的 **v5.0.0-beta.2** 也已经发布. 也越来越临近开学了, 希望初中能上电脑课吧 (笑).&#13;
&#13;
至于什么时候发布, 嗯......如果一切顺利的话, 可能会在 8 月 25 日, 具体时间待定.&#13;
&#13;
废话不多说, 在此罗列这一个多月的开发成果 ~(我才不会告诉你这些东西是 v5.0.0 正式版更新日志的一部分, 绝对不是因为我太懒了)~:&#13;
&#13;
### 软件本体 (v5.0.0)&#13;
&#13;
- 拆分源代码文件;&#13;
- 迁移至现代 C++ 标准;&#13;
- 重构软件架构;&#13;
- 重构破解/恢复模块, 增强可拓展性;&#13;
- 移除键盘输入选择, 改为鼠标点选;&#13;
- 移除命令行参数`-color=`;&#13;
- 添加命令行参数`--sparse--view`;&#13;
- 默认锁定窗口大小, 禁用部分窗口控件;&#13;
- 支持窗口半透明;&#13;
- 修复以管理员权限启动时, 窗口标题中出现`管理员: `字样;&#13;
- 修复从非 GBK 文字编码的控制台中启动, 所有非 ASCII 字符乱码;&#13;
- 修复部分数据类型不匹配;&#13;
- 彻底移除 '工具箱';&#13;
- 添加软件图标;&#13;
- 支持老旧的 Windows OS (如 Windows 7);&#13;
- 修正版权信息;&#13;
- 其他技术性更改.&#13;
&#13;
### 启动脚本 (v2.0.0)&#13;
&#13;
- 重构启动脚本;&#13;
- 默认显示软件支持的 CPU 架构, 依赖的 Runtime;&#13;
- 改为非内联启动;&#13;
- 添加启动等待提示;&#13;
- 修正版权信息;&#13;
- 其他技术性更改.&#13;
&#13;
### 其他&#13;
&#13;
- 优化项目结构;&#13;
- 优化编译命令;&#13;
- 重构构建系统.。</description><guid isPermaLink="true">https://MaxLHy0424.github.io/post/11.html</guid><pubDate>Thu, 15 Aug 2024 11:25:32 +0000</pubDate></item><item><title>paru: 比 yay 更加强大的 AUR 助手</title><link>https://MaxLHy0424.github.io/post/10.html</link><description>[*paru*](https://github.com/Morganamilo/paru) 是 *yay* 的作者之一 Morganamilo 使用 Rust 编写的另一个 AUR 助手. 基本命令与功能与 *yay* 和 *pacman* 几乎一样, 所以迁移过来不会有任何困难.&#13;
&#13;
# 0 安装&#13;
&#13;
如果没有安装其他的 AUR 助手, 可以执行以下命令:&#13;
```bash&#13;
sudo pacman -S --needed git base-devel&#13;
git clone https://aur.archlinux.org/paru-git.git&#13;
cd paru-git&#13;
makepkg -si&#13;
```&#13;
&#13;
如果有安装 *yay*, 可以直接执行:&#13;
```bash&#13;
yay -S paru-git&#13;
```&#13;
&#13;
# 1 基本用法&#13;
&#13;
## 1.1 `paru`&#13;
&#13;
当什么参数都不加的时候, 默认执行`paru -Syu`, 首先从软件仓库查找更新, 然后从 AUR 查找更新.&#13;
&#13;
## 1.2 `paru &lt;search terms&gt;`&#13;
&#13;
通过 *paru* 搜索关键词`&lt;search terms&gt;`的软件包, 并询问要安装哪一个. 以下是 `paru texlive-full` 的输出:&#13;
```&#13;
1 aur/texlive-full 1:2022.20220406-1 [+5 ~0.00] [已安装]&#13;
    This packages provides texlive-full in /opt. It also tricks ArchLinux into thinking it has its texlive packages installed.&#13;
:: 需要安装的包 (例如: 1 2 3, 1-3):&#13;
:: &#13;
```&#13;
&#13;
## 1.3 `paru &lt;operation&gt; [options] [targets]`&#13;
&#13;
这里`&lt;operation&gt;`是一个必须参数, 表示操作. 用缩写的时候用一个大写字母表示, 例如`-S`表示`--sync`,  `&lt;options&gt;`是选项. 多个选项可以写在一起, 例如`paru --sync -y -u`就是常见的`paru -Syu`.&#13;
&#13;
# 2 *paru* 特有的操作&#13;
&#13;
## 2.1 `-P` (`--show`)&#13;
&#13;
打印相关的选项.&#13;
&#13;
### 2.1.1 `-c` (`--complete`)&#13;
&#13;
打印所有来自 AUR 和软件仓库的包, 用于自动补全, **用户不应直接使用**.&#13;
&#13;
### 2.1.2 `-s` (`--state`)&#13;
&#13;
展示安装的软件包的信息以及系统健康情况, 以及是否有过期包, 孤儿包等.&#13;
&#13;
### 2.1.3 `-w` (`--news`)&#13;
&#13;
展示来自 Arch Linux 主页的新闻. 只展示比所有本地软件包构建日期要新的新闻, 要展示所有新闻, 请使用`-ww`.&#13;
&#13;
### 2.1.4 `-o` (`--order`)&#13;
&#13;
展示目标软件包的构建顺序.&#13;
&#13;
## 2.2 `-G` (`--getpkgbuild`)&#13;
&#13;
从 ABS (Arch Linux Build System, Arch Linux 构建系统) 或者 AUR 下载 PKGBUILD, ABS 只能对 Arch Linux 软件仓库用.&#13;
&#13;
### 2.2.1 `-p` (`--print`)&#13;
&#13;
将`PKGBUILD`打印到终端, 而不是下载`PKGBUILD`.&#13;
&#13;
### 2.2.2 `-c` (`--comments`)&#13;
&#13;
展示软件包的 AUR 评论.&#13;
&#13;
### 2.2.3 `-s` (`--ssh`)&#13;
&#13;
通过 ssh 克隆 AUR 仓库.&#13;
&#13;
## 2.3 `-U` (`--upgrade`)&#13;
&#13;
当不带目标执行的时候, 使用 *makepkg* 相同, 构建当前文件夹下的`PKGBUILD`.&#13;
&#13;
### 2.3.1 `-i` (`--install`)&#13;
&#13;
构建完毕后同时安装.&#13;
&#13;
## 2.4 `-L` (`--repoctl`)&#13;
&#13;
列出所有仓库.&#13;
&#13;
### 2.4.1 `-l` (`--list`)&#13;
&#13;
显示本地仓库的软件包.&#13;
&#13;
### 2.4.2 `-d` (`--delete`)&#13;
&#13;
移除本地的一个软件包, 使用`-dd`同时卸载该软件包.&#13;
&#13;
### 2.4.3 `-y` (`--refresh`)&#13;
&#13;
刷新本地仓库.&#13;
&#13;
### 2.4.4 `-q` (`--quiet`)&#13;
&#13;
展示更少信息.&#13;
&#13;
## 2.5 `-C` (`--chrootctl`)&#13;
&#13;
到 chroot 的交互式命令行.&#13;
&#13;
### 2.5.1 `-i` (`--install`)&#13;
&#13;
将一个软件包安装到 chroot.&#13;
&#13;
### 2.5.2 `-u` (`--sysupgrade`)&#13;
&#13;
更新 chroot.&#13;
&#13;
# 3 扩展 *pacman* 的操作&#13;
&#13;
扩展到同时支持软件仓库和 AUR 的软件包的操作有`-R`, `-S`, `-Si`, `-Sl`, `-Ss`, `-Su`, `-Sc`, `-Qu`, `-T`.&#13;
&#13;
## 3.1 `-R`&#13;
&#13;
*paru* 会同时清除关于`devel`包的缓存数据.&#13;
&#13;
## 3.2 `-Sc`&#13;
&#13;
*paru* 会同时清除缓存的 AUR 软件包以及缓存中任何未被跟踪的文件. 清除未被跟踪的文件会清除所有下载的 source 以及构建好的软件包，但是下载的 VCS source 会被保留。</description><guid isPermaLink="true">https://MaxLHy0424.github.io/post/10.html</guid><pubDate>Fri, 09 Aug 2024 03:29:23 +0000</pubDate></item><item><title>CRCSN 开发小记 02</title><link>https://MaxLHy0424.github.io/post/7.html</link><description>三天过去了, CRCSN v5.0.0 的开发工作快马加鞭进行着, 讲讲这几天的成果吧.&#13;
&#13;
### 完全重构&#13;
&#13;
目前, 已经完全将核心代码从冗余的函数中拆分出来, 统一放在命名空间`CRCSN`下, 并保存在`module.hpp`中. 之后开发新功能只要向命名空间内添加新函数, 然后在主页创建一个条目就行了.&#13;
&#13;
## 实装 ConsoleUI&#13;
&#13;
ConsoleUI 目前基本取代了键盘输入选择的方式, 让操作更加简单方便. 经过这几天的打磨, 美观度上也无需担心. 目前的最新开发版本`24w27d`已经基本完成了主页的重构, 具体见下图:&#13;
![CRCSN 版本 24w27d 的主页](https://github.com/MaxLHy0424/MaxLHy0424.github.io/assets/142279449/49740e9c-bc68-422a-94d2-750ee54cbdeb)&#13;
&#13;
v5.0.0 致力让大家更加满意!&#13;
。</description><guid isPermaLink="true">https://MaxLHy0424.github.io/post/7.html</guid><pubDate>Fri, 28 Jun 2024 09:50:15 +0000</pubDate></item><item><title>CRCSN 开发小记 01</title><link>https://MaxLHy0424.github.io/post/6.html</link><description>首先给不知道啥是 CRCSN 的讲讲. 总而言之, 这就是我自己开发的一个小项目, 作用是用来破解学校机房里比较主流的控制软件用的. 当初因为一时冲动而成, 目前正在规划 v5.0.0 大更新.&#13;
&#13;
大版本更新, 先画个饼吧. v5.0.0 目前规划的更新如下:&#13;
 - ConsoleUI (伪 GUI)&#13;
 - 重构 '工具箱'&#13;
&#13;
ConsoleUI 是在 Bilibili 上看到一个视频 (详见[此处](https://www.bilibili.com/video/BV1X14y1n7S4/)), 实现了在控制台窗口中使用鼠标点选, 想起 CRCSN 被同学吐槽学习成本高, 他们不会用 ~(我也是真的醉了)~, 才有次立项. 目前打算通过~复制粘贴别人写好的~函数调用 Windows API 实现.&#13;
&#13;
至于重构 '工具箱'...怎么说呢, '工具箱' 这东西从 v4.0.0 添加以来, 使用的人几乎没有, 但大部分的 Bug 却都是这东西的问题...于是折腾了好几个版本后, 忍无可忍才在 v4.9.0 移除. 目前还能再程序内看见它, 但已经被我删的只剩个空壳了. 也算是把那些屎山代码移除了.&#13;
&#13;
v5.0.0 的开发分支预计于 2024 年 6 月 26 日 17:00 左右同步至 GitHub 仓库, 还请各位拭目以待!&#13;
&#13;
GitHub 仓库请点[此处](https://github.com/MaxLHy0424/CRCSN)访问.。</description><guid isPermaLink="true">https://MaxLHy0424.github.io/post/6.html</guid><pubDate>Tue, 25 Jun 2024 08:06:09 +0000</pubDate></item><item><title>为 Hyper-V 中的 Arch Linux 启用增强会话</title><link>https://MaxLHy0424.github.io/post/5.html</link><description>使用 Hyper-V 去安装 GNU/Linux 发行版, 启用增强会话最令人头大. 不清楚是不是 Microsoft 有意为之让大家用 WSL 2. 但总归, 这并不容易.&#13;
&#13;
本教程将教您如何为 Hyper-V 中的 Arch Linux 虚拟机启用增强会话.&#13;
&#13;
# 0 准备工作&#13;
&#13;
&gt; [!IMPORTANT]&#13;
&gt; 请确保您的 Arch Linux 虚拟机是第二代虚拟机, 同时使用 *pipewire* 作声音服务. 并且在 Hyper-V 设置中允许使用增强会话.&#13;
&#13;
然后, 在主机 Windows OS 下以管理员权限打开 PowerShell, 执行 (`&lt;VM&gt;`改成 Arch Linux 虚拟机的名字, 最好加上英文半角双引号):&#13;
```PowerShell&#13;
Set-VM -VMName &lt;VM&gt; -EnhancedSessionTransportType HvSocket&#13;
```&#13;
&#13;
# 1 配置包管理器&#13;
&#13;
详见[这篇教程](https://maxlhy0424.github.io/post/2.html)的第 3 部分和[另一篇教程](https://maxlhy0424.github.io/post/10.html).&#13;
&#13;
# 2 安装集成服务&#13;
&#13;
执行以下命令:&#13;
```bash&#13;
sudo pacman -S hyperv&#13;
for i in {vss,fcopy,kvp}; do sudo systemctl enable hv_${i}_daemon.service; done&#13;
```&#13;
&#13;
# 3 安装软件包&#13;
&#13;
如果没有安装 *git*, 请先执行以下命令:&#13;
```bash&#13;
sudo pacman -S git base-devel&#13;
```&#13;
&#13;
执行以下命令:&#13;
```bash&#13;
git clone https://github.com/microsoft/linux-vm-tools.git&#13;
git clone https://aur.archlinux.org/xrdp-devel-git.git&#13;
```&#13;
&#13;
首先切换到文件夹`xrdp-devel-git`, 在文件`PKGBUILD`中的`build()`部分中, 添加以下参数到构建选项中:&#13;
```&#13;
--enable-vsock&#13;
```&#13;
&#13;
即整个`build()`变为:&#13;
```&#13;
build() {&#13;
  cd $pkgname&#13;
  ./configure --prefix=/usr \&#13;
              --sysconfdir=/etc \&#13;
              --localstatedir=/var \&#13;
              --sbindir=/usr/bin \&#13;
	      --libexecdir=/usr/lib \&#13;
              --with-systemdsystemdunitdir=/usr/lib/systemd/system \&#13;
              --enable-jpeg \&#13;
              --enable-tjpeg \&#13;
              --enable-fuse \&#13;
	      --enable-opus \&#13;
	      --enable-rfxcodec \&#13;
	      --enable-mp3lame \&#13;
	      --enable-pixman \&#13;
              --enable-vsock&#13;
  # Fight unused direct deps&#13;
  sed -i -e 's/ -shared / -Wl,-O1,--as-needed\0 /g' -e 's/    if test '$export_dynamic' = yes &amp;&amp; test -n '$export_dynamic_flag_spec'; then/      func_append compile_command ' -Wl,-O1,--as-needed'\n      func_append finalize_command ' -Wl,-O1,--as-needed'\n\0/' libtool&#13;
  make V=0&#13;
}&#13;
```&#13;
&#13;
就是`# Fight unused direct deps`上面的两行改了一下.&#13;
&#13;
编辑完成后, 执行命令:&#13;
```&#13;
makepkg --skipchecksum -si&#13;
```&#13;
&#13;
然后执行以下命令:&#13;
```&#13;
paru -S xorg-xinit xorgxrdp-devel-git openssl-1.1 pipewire-module-xrdp&#13;
```&#13;
&#13;
接着切换回当初克隆仓库时所在的目录, 切换到`linux-vm-tools/arch`, 执行:&#13;
```bash&#13;
sudo ./install-config.sh&#13;
```&#13;
&#13;
&gt; [!WARNING]&#13;
&gt; 不要使用`linux-vm-tools/arch`中的`makepkg.sh`脚本, 其编译选项并不正确.&#13;
&#13;
# 4 解决 *XRDP* 反复连接问题&#13;
&#13;
在当前用户的家目录下创建`.xinitrc`.&#13;
&#13;
根据不同的桌面环境添加内容:&#13;
 - *i3w / dwm*:&#13;
 ``` &#13;
 exec i3w&#13;
 ```&#13;
 - *Gnome*:&#13;
 ```&#13;
 unset SESSION_MANAGER&#13;
 unset DBUS_SESSION_BUS_ADDRESS&#13;
 exec dbus-launch  gnome-shell --x11&#13;
 ```&#13;
 - *KDE Plasma*:&#13;
 ```&#13;
 export DESKTOP_SESSION=plasma&#13;
 /usr/lib/plasma-dbus-run-session-if-needed startplasma-x11 &#13;
 ```&#13;
 - *Xfce4*:&#13;
 ```&#13;
 unset SESSION_MANAGER&#13;
 unset DBUS_SESSION_BUS_ADDRESS&#13;
 exec dbus-launch startxfce4&#13;
 ```&#13;
&#13;
然后执行:&#13;
```bash&#13;
sudo systemctl enable xrdp.service&#13;
sudo systemctl enable xrdp-sesman.service&#13;
sudo xrdp-keygen xrdp /etc/xrdp/rsakeys.ini&#13;
sudo pacman -Rcns $(pacman -Qtdq)&#13;
```&#13;
&#13;
接着重启虚拟机.&#13;
&#13;
重启后依次输入用户名, 用户密码登录账户, 然后在弹出窗口中再次输入账户密码即可.&#13;
&#13;
&gt; [!TIP]&#13;
&gt; 实际上直接关闭弹出的窗口也是可以正常使用的, 不过最好还是输入以下账户密码.&#13;
&#13;
至此, 一切大功告成!&#13;
&#13;
# DLC 汉化 *SDDM*&#13;
&#13;
这一部分和本篇教程没什么关系, 了解下就可以.&#13;
&#13;
如果是以 *Systemd* 启动 *SDDM*, 可以打开`/usr/lib/systemd/system/sddm.service`, 在`[Service]`下添加:&#13;
```&#13;
Environment=LANG=zh_CN.UTF-8&#13;
```&#13;
&#13;
如果不是 *Systemd* 启动, 只能改`/etc/locale.conf`了 (不建议改, 虚拟终端会乱码).。</description><guid isPermaLink="true">https://MaxLHy0424.github.io/post/5.html</guid><pubDate>Mon, 24 Jun 2024 08:44:46 +0000</pubDate></item><item><title>终究是小学毕业了</title><link>https://MaxLHy0424.github.io/post/4.html</link><description>&gt; 本文原定于今天下午 7 点发布, 但因为突然有事, 延迟到了现在, 深感抱歉.&#13;
&#13;
不知不觉间, 小学六年时光匆匆而去. 今天起, 我已不再是一名小学生. 鲜艳的红领巾摆放在柜子的一角, 校徽随手丢在抽屉的深处, 校服消沉在了衣柜中. 以往朝夕相处的同学, 现在只存于照片里了. 小学六年, 每一次的欢乐, 哭泣, 振作, 都沉入了昨日的夕阳. 小学生活, 至此告一段落, 画上了圆满的句号.&#13;
&#13;
六年, 9600 节课, 240 个星期, 12 个学期, 一张试卷考散了一群人, 最后只留下一张照片和一声再见. 六年, 书齐了, 人却散了, 和朝夕相处的同学们坐到站了, 也该下车了...下车后，新的列车依旧坐满了人, 可惜, 已经不是原来那群人了...&#13;
&#13;
还记得那每天两声 '老师好' 和 '老师再见', 到现在, 只剩 '有缘再见'. 时光匆匆中, 每个鲜活的人使我难忘. 我的同学, 我的老师, 现在他们都沉于我的漫漫的记忆长河中了. 那些快乐的时光, 都将在我内心深处如宝石般闪闪发光. 明明已是黑夜, 但我仍可见昨日的夕阳...&#13;
&#13;
我将永远铭记这一切, 直到永远...&#13;
&#13;
我的故事尚未画下句号, 大家的故事尚未画下句号. 你我的故事, 仍需继续写下去, 直到人生终末的句号. 这样的时刻会在不久的将来重演, 而你我, 仍然走着自己的人生之路. 我们回首夕阳, 更要看向远方, 将我们的 '青春剧' 继续演下去...&#13;
&#13;
&gt; 谨以此文献给我亲爱的同学, 老师, 以及我的母校. 愿我们都能书写出自己人生的辉煌篇章.。</description><guid isPermaLink="true">https://MaxLHy0424.github.io/post/4.html</guid><pubDate>Sat, 22 Jun 2024 13:53:41 +0000</pubDate></item><item><title>手把手教您编译适用于 WSL 2 的 Linux Kernel</title><link>https://MaxLHy0424.github.io/post/3.html</link><description>WSL 2 即使更新到最新预发布版本, Linux Kernel 版本也是`6.6.xxx`. 一部分软件可能会需要更高的内核版本, 或者是用户想要测试最新的 Linux Kernel 特性. 因此, 网上替换 WSL 2 的 Linux Kernel 的教程才会如此涌现.&#13;
&#13;
&gt; [!CAUTION]&#13;
&gt; 这可能会导致部分 GNU/Linux 发行版不稳定, 软件无法运行等问题. 所以不建议在生产环境中替换 WSL 2 的 Linux Kernel.&#13;
&#13;
&gt; [!TIP]&#13;
&gt; 如果您在 WSL 2 中使用 Arch Linux, 建议先阅读[这篇教程](https://MaxLHy0424.github.io/post/2.html), 对 Arch WSL 进行基本的配置, 然后再阅读本教程.&#13;
&#13;
# 1 安装依赖&#13;
&#13;
Debian 系:&#13;
```Bash&#13;
sudo apt install build-essential flex bison dwarves libssl-dev libelf-dev&#13;
```&#13;
&#13;
Arch 系:&#13;
```Bash&#13;
sudo pacman -S base-devel flex bison pahole openssl libelf bc&#13;
```&#13;
&#13;
# 2 下载 Linux Kernel 源代码&#13;
&#13;
访问网站 ['The Linux Kernel Archive'](https://kernel.org), 等待加载完成后, 可以看到网页中间的 Linux Kernel 源代码存档列表. 在此之前, 我们需要了解 Linux Kernel 的主要开发分支:&#13;
&#13;
- `mainline` (主线)&#13;
    - Linux Kernel 的主要开发分支, 由 ***Linus Torvalds*** 管理, 包含最新的 Linux Kernel 特性及漏洞修复.&#13;
    - 常常作为下一个 Linux Kernel 的开发分支, 可能存在一些稳定性问题.&#13;
- `stable` (稳定)&#13;
    - 最常用的 Linux Kernel 分支, 包含最新的漏洞修复, 日常使用首选.&#13;
- `longterm` (长期)&#13;
    - 较旧的 Linux Kernel 分支, 持续进行漏洞修复. 长期使用首选.&#13;
&#13;
根据具体需求下载对应的 Linux Kernel, 然后通过 Windows 资源管理器复制到前面安装好依赖的 GNU/Linux 发行版的用户家目录中.&#13;
&#13;
然后执行以下命令 (将`&lt;File&gt;`替换为您的 Linux Kernel 压缩包文件名, 将`&lt;Dir&gt;`替换为您的 Linux Kernel 压缩包解压后的目录名):&#13;
```Bash&#13;
cd ~&#13;
tar xf &lt;File&gt;&#13;
cd &lt;Dir&gt;&#13;
```&#13;
&#13;
# 3 编译内核&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 如果您在中国大陆, 此步骤可能需要使用网络代理.&#13;
&#13;
执行以下命令下载适用于 WSL 2 的 Linux Kernel 构建配置并保存:&#13;
```Bash&#13;
wget https://raw.githubusercontent.com/microsoft/WSL2-Linux-Kernel/linux-msft-wsl-6.1.y/arch/x86/configs/config-wsl -O arch/x86/configs/config-wsl&#13;
```&#13;
&#13;
然后执行以下命令来使用全部线程编译内核:&#13;
```Bash&#13;
make KCONFIG_CONFIG=arch/x86/configs/config-wsl -j$(nproc)&#13;
```&#13;
&#13;
途中的编译配置选择一路按回车即可.&#13;
&#13;
# 4 保存并替换&#13;
&#13;
执行以下命令 (将`&lt;PATH&gt;`替换为 C 盘下的文件路径, 例如`Data/WslLinuxKernel`):&#13;
```Bash&#13;
cp arch/x86/boot/bzImage /mnt/c/&lt;PATH&gt;&#13;
```&#13;
然后将文件名改为`kernel`.&#13;
&#13;
接着, 在当前 Windows 用户目录下创建文件`.wslconfig` (有则不用), 添加 (`[wsl2]`无需重复添加; 将`C:\\&lt;PATH&gt;\\kernel`替换为您的 Linux Kernel 文件路径; 把路径分隔符替换为`\\`):&#13;
```&#13;
[wsl2]&#13;
kernel=C:\\&lt;PATH&gt;\\kernel &#13;
```&#13;
&#13;
接着, 在 Windows Terminal 中执行以下命令:&#13;
```Batch&#13;
wsl --shutdown&#13;
```&#13;
&#13;
再次启动 WSL 2 中的 GNU/Linux 发行版, 执行:&#13;
```Bash&#13;
uname -a&#13;
```&#13;
&#13;
Linux Kernel 已经成功替换, 一切大功告成!。</description><guid isPermaLink="true">https://MaxLHy0424.github.io/post/3.html</guid><pubDate>Fri, 21 Jun 2024 10:43:20 +0000</pubDate></item><item><title>下江小春都能看懂的 Arch WSL 安装与配置指南</title><link>https://MaxLHy0424.github.io/post/2.html</link><description>在 Windows OS 上开发 GNU/Linux 软件时, WSL 2 常为不二之选.&#13;
&#13;
但是, WSL 2 上开箱即用的 GNU/Linux 发行版, 几乎只有 Ubuntu. 想要在 WSL 2 上使用 Arch Linux, 配置较为麻烦.&#13;
&#13;
本教程将帮助您在 WSL 2 上安装并配置 Arch Linux.&#13;
&#13;
&gt; [!IMPORTANT]&#13;
&gt; 适用于 Windows 11 22H2 及以上版本, 其以下的版本可能会出现各种问题.&#13;
&#13;
# 0 准备工作&#13;
&#13;
WSL 2 的硬件需求及启用方法在此处不多赘述, 请自行查阅.&#13;
&#13;
&gt; [!NOTE]&#13;
&gt; 如果您有安装 VMware Workstation Pro 等寄居型虚拟机, 推荐改用 Microsoft Hyper-V. 否则其运行的虚拟机性能可能会受到影响.&#13;
&#13;
启用后, 在 Windows Terminal (管理员权限) 中执行以下命令:&#13;
```Batch&#13;
wsl --update&#13;
wsl --update --pre-release&#13;
```&#13;
&#13;
接着, 在当前的 Windows OS 用户目录下创建文件`.wslconfig`, 在文件中添加以下内容:&#13;
```&#13;
[wsl2]&#13;
ipv6=true&#13;
networkingMode=mirrored&#13;
dnsTunneling=true&#13;
firewall=true&#13;
autoProxy=true&#13;
defaultVhdSize=137438953472&#13;
[experimental]&#13;
autoMemoryReclaim=gradual&#13;
bestEffortDnsParsing=true&#13;
useWindowsDnsCache=true&#13;
```&#13;
&#13;
然后, 在 Microsoft Store 中搜索`Arch WSL`, 点击下图中所示的软件 (一般为第1个):&#13;
&#13;
![Microsoft Store 搜索结果的局部截图](https://github.com/MaxLHy0424/MaxLHy0424.github.io/assets/142279449/ef60802e-5e57-4b6f-81cf-aa6add640178)&#13;
&#13;
按照正常流程安装, 打开, 创建账户. &#13;
&#13;
# 1 修改 root 用户密码&#13;
&#13;
通过`sudo passwd root`修改`root`用户密码.&#13;
&#13;
# 2 配置 *GNU Nano* 文本编辑器&#13;
&#13;
打开`/etc/nanorc`, 在末尾追加:&#13;
```&#13;
bind ^X cut main&#13;
bind ^C copy main&#13;
bind ^V paste all&#13;
bind ^Q exit all&#13;
bind ^S savefile main&#13;
bind ^W writeout main&#13;
bind ^O insert main&#13;
bind ^H help all&#13;
bind ^H exit help&#13;
bind ^F whereis all&#13;
bind ^G findnext all&#13;
bind ^B wherewas all&#13;
bind ^D findprevious all&#13;
bind ^R replace main&#13;
unbind ^U all&#13;
unbind ^N main&#13;
unbind ^Y all&#13;
unbind M-J main&#13;
unbind M-T main&#13;
bind ^A mark main&#13;
bind ^P location main&#13;
bind ^T gotoline main&#13;
bind ^T gotodir browser&#13;
bind ^T cutrestoffile execute&#13;
bind ^L linter execute&#13;
bind ^E execute main&#13;
bind ^K '{mark}{end}{zap}' main&#13;
bind ^U '{mark}{home}{zap}' main&#13;
bind ^Z undo main&#13;
bind ^Y redo main&#13;
set tabsize 4&#13;
set autoindent&#13;
set noconvert&#13;
set smarthome&#13;
set tabstospaces&#13;
set mouse&#13;
set linenumbers&#13;
set casesensitive&#13;
set multibuffer&#13;
set nonewlines&#13;
set magic&#13;
set softwrap&#13;
set wordbounds&#13;
set constantshow&#13;
include /usr/share/nano/*.*&#13;
```&#13;
&#13;
# 3 配置包管理器&#13;
&#13;
打开`/etc/pacman.d/mirrorlist`, 在顶部添加:&#13;
```&#13;
Server = https://mirrors.tuna.tsinghua.edu.cn/archlinux/$repo/os/$arch&#13;
```&#13;
&#13;
打开`/etc/pacman.conf`, 找到:&#13;
```&#13;
#UseSyslog&#13;
#Color&#13;
NoProgressBar&#13;
```&#13;
换成:&#13;
```&#13;
UseSyslog&#13;
Color&#13;
#NoProgressBar&#13;
```&#13;
&#13;
然后找到这一行:&#13;
```&#13;
ParallelDownloads = 5&#13;
```&#13;
将后面的`5`修改成你想要同时下载的软件包的数量.&#13;
&#13;
接着把后面的软件源全部删掉, 换成下面的:&#13;
```&#13;
[testing]&#13;
Include = /etc/pacman.d/mirrorlist&#13;
[staging]&#13;
Include = /etc/pacman.d/mirrorlist&#13;
[core-testing]&#13;
Include = /etc/pacman.d/mirrorlist&#13;
[core-staging]&#13;
Include = /etc/pacman.d/mirrorlist&#13;
[core]&#13;
Include = /etc/pacman.d/mirrorlist&#13;
[extra-testing]&#13;
Include = /etc/pacman.d/mirrorlist&#13;
[extra-staging]&#13;
Include = /etc/pacman.d/mirrorlist&#13;
[extra]&#13;
Include = /etc/pacman.d/mirrorlist&#13;
[community-testing]&#13;
Include = /etc/pacman.d/mirrorlist&#13;
[community-staging]&#13;
Include = /etc/pacman.d/mirrorlist&#13;
[community]&#13;
Include = /etc/pacman.d/mirrorlist&#13;
[multilib-testing]&#13;
Include = /etc/pacman.d/mirrorlist&#13;
[multilib-staging]&#13;
Include = /etc/pacman.d/mirrorlist&#13;
[multilib]&#13;
Include = /etc/pacman.d/mirrorlist&#13;
[archlinuxcn]&#13;
Server = https://mirrors.tuna.tsinghua.edu.cn/archlinuxcn/$arch&#13;
[blackarch]&#13;
SigLevel = Never&#13;
Server = https://mirrors.tuna.tsinghua.edu.cn/blackarch/$repo/os/$arch&#13;
```&#13;
&#13;
执行以命令:&#13;
```bash&#13;
sudo pacman-key --init&#13;
sudo pacman-key --lsign-key 'farseerfc@archlinux.org'&#13;
sudo pacman -Sy archlinuxcn-keyring blackarch-keyring --noconfirm&#13;
```&#13;
&#13;
执行以下命令安装 *yay* 稳定版 (安装开发版把`yay`改为`yay-git`):&#13;
````bash&#13;
sudo pacman -S yay&#13;
````&#13;
&#13;
如果您愿意的话, 也可以试试 *paru*, 可以参考[这篇教程](https://maxlhy0424.github.io/post/10.html).&#13;
&#13;
# 4 汉化&#13;
&#13;
打开`/etc/locale.gen`, 找到:&#13;
```&#13;
#en_US.UTF-8 UTF-8&#13;
```&#13;
```&#13;
#zh_CN.UTF-8 UTF-8&#13;
```&#13;
将前面的`#`去掉.&#13;
&#13;
打开`/etc/locale.conf`, 将所有文本替换为:&#13;
```&#13;
LANG=en_US.UTF-8&#13;
```&#13;
&#13;
打开`/etc/profile`, 在末尾追加:&#13;
```&#13;
export LC_ALL=zh_CN.UTF-8&#13;
export LANG=zh_CN.UTF-8&#13;
export LANGUAGE=zh_CN:en_US&#13;
```&#13;
&#13;
然后执行以下命令:&#13;
```bash&#13;
sudo pacman -S adobe-source-han-sans-cn-fonts adobe-source-han-serif-cn-fonts wqy-microhei wqy-microhei-lite ttf-hannom wqy-zenhei wqy-bitmapfont ttf-arphic-ukai ttf-arphic-uming ttf-hannom noto-fonts opendesktop-fonts noto-fonts-emoji --noconfirm&#13;
sudo locale-gen&#13;
```&#13;
&#13;
# 5 解决 *WSLg* 及 *Systemd* 问题&#13;
&#13;
执行:&#13;
```bash&#13;
echo \&#13;
'# Type Path           Mode UID  GID  Age Argument&#13;
L+     /tmp/.X11-unix -    -    -    -   /mnt/wslg/.X11-unix' | sudo tee /etc/tmpfiles.d/wslg.conf&#13;
```&#13;
&#13;
如果 *Systemd* 没有启动, 可以试试:&#13;
```&#13;
echo '[boot]&#13;
systemd=true' | sudo tee /etc/wsl.conf&#13;
```&#13;
&#13;
# 6 善后工作及后续使用注意事项&#13;
&#13;
执行以下命令:&#13;
```bash&#13;
sudo pacman -Syyu net-tools tree python wget base base-devel git --needed --noconfirm&#13;
sudo pacman -Rcns $(pacman -Qtdq) --noconfirm&#13;
sudo pacman -Scc --noconfirm&#13;
sudo rm -rf /tmp/*&#13;
for i in {font,ICE,X11,XIM}; do sudo rm -rf /tmp/.${i}-unix; done&#13;
for i in {cache,log,tmp}; do sudo rm -rf /var/${i}/*; done&#13;
```&#13;
&#13;
&gt; [!IMPORTANT]&#13;
&gt; 如果后续安装软件包缺少依赖, 可以临时注释掉`/etc/pacman.conf`中所有后缀为`testing`或`staging`的软件源, 完成后使用`sudo pacman -Syyu`更新依赖即可.&#13;
&#13;
# *? 预告*&#13;
&#13;
WSL 2 即使更新到最新预发布版本, Linux Kernel 版本也是`6.6.xxx`. 下一篇教程将教您自己编译 Linux Kernel, 并在 WSL 2 中使用!。</description><guid isPermaLink="true">https://MaxLHy0424.github.io/post/2.html</guid><pubDate>Thu, 20 Jun 2024 11:15:36 +0000</pubDate></item><item><title>关于</title><link>https://MaxLHy0424.github.io/about.html</link><description>欢迎来到我 MaxLHy0424 的 Blog 🤗.&#13;
&#13;
这里会发布**我整理的一些资源**, 和**我自己写的文章** (包括但不限于**教程**, **同人文**).&#13;
&#13;
感兴趣的话, 可以将本网站加入浏览器收藏夹, 或者推荐给其他人. 有 GitHub 账户的话, 就评论下吧, 让 Blog 热闹些也不错 😉.&#13;
&#13;
至于我?......在此介绍下, 我是学生 ~(不是 24 岁)~, 2024 年下半年正式成为一名 *oier* 😎. 会用 **C++** 和 **Shell** 写点小工具, 平时喜欢折腾 Linux 🧐. 偶尔写写同人文 ~(大半是 R18+)~ 🥵. 游戏方面, 主玩 ***Minecraft*** 和 ***蔚蓝档案*** (国际服 UID 27993184, 欢迎加我好友 😃), 同时也会自己做一些游戏玩 😆.&#13;
&#13;
**我的个人账户**:&#13;
 - [Bilibili](https://space.bilibili.com/1678066522)&#13;
 - [MineBBS](https://www.minebbs.com/members/maxlhy.88192/)&#13;
 - [GitHub](https://github.com/MaxLHy0424)&#13;
 - QQ: 1097268127&#13;
 - Xbox ID: MaxLHy0424&#13;
&#13;
顺带一提, 此 Blog 基于 [Gmeek](https://github.com/Meekdai/Gmeek), 在这里也推荐看看它的维护者 [Meekdai](https://github.com/Meekdai) 的 [Blog](https://blog.meekdai.com) 😚.。</description><guid isPermaLink="true">https://MaxLHy0424.github.io/about.html</guid><pubDate>Thu, 20 Jun 2024 09:44:09 +0000</pubDate></item></channel></rss>